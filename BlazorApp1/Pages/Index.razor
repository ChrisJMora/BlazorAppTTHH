@page "/"
@inject NavigationManager NavigationManager

@{
    @using BlazorApp1.Services;
    @using BlazorApp1.Models;
}

<h1 class="login-header">Ingresar Credenciales</h1>

@if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
}

<<<<<<< HEAD
<div class="container">
    <div class="login-container">
        <div class="form-group">
            <label class="form-label">Correo:</label>
            <input @bind="email" class="form-input" />
        </div>

        <div class="form-group">
            <label class="form-label">Contraseña:</label>
            <input type="password" @bind="password" class="form-input" />
        </div>

        <div>
            <select>
                @if (emisores != null)
                {
                    foreach (var emisor in emisores)
                    {
                        <option>@emisor.Codigo @emisor.NombreEmisor</option>
                    }
                }
            </select>
=======
<EditForm model="@usuario" OnValidSubmit="@RedirectPage">
    <DataAnnotationsValidator />

    <div  class="container">
        <div class="login-container">
            <div class="form-group">
                <label for="Email" class="form-label">Correo:</label>
                <InputText id="Email" @bind-Value="usuario.Email" class="form-input" />
                <ValidationMessage For="@(() => usuario.Email)" /> 
            </div>

            <div class="form-group">
                <label for="Password" class="form-label">Contraseña:</label>
                <InputText type="password" id="Password" @bind-Value="usuario.Password" class="form-input" />
                <ValidationMessage For="@(() => usuario.Password)" /> 
            </div>

            <div>
                <select>
                    @if (emisores != null)
                    {
                        foreach(var emisor in emisores)
                        {
                            <option>@emisor.Codigo @emisor.NombreEmisor</option>
                        }
   
                    }
                </select>
            </div>

            <div class="form-group">
                <label class="forgot">Se ha olvidado la contraseña</label>
            </div>

            <button type="submit" class="custom-button"> Aceptar </button>
>>>>>>> b75ce1a1b6af9812190ff65d525c924f9655986f
        </div>

    </div>
<<<<<<< HEAD
</div>
=======
</EditForm>
>>>>>>> b75ce1a1b6af9812190ff65d525c924f9655986f

@if (showPopup)
{
    <div class="popup">
        <div class="popup-content">
            <span class="close" @onclick="ClosePopup">&times;</span>
            <p>User Information:</p>
            <p>Name: @userInfo?.NombreUsuario</p>
            <p>Profile: @userInfo?.Perfil</p>
        </div>
    </div>
}

@code {
    private Usuario usuario = new Usuario();
    private string? errorMessage;

    private List<Emisor>? emisores;
    private bool showPopup = false;
    private Usuario? userInfo;

    protected override async Task OnInitializedAsync()
    {
        emisores = await ApiService.Singleton().ObtenerEmisores();
    }

<<<<<<< HEAD
    private async Task RedirectPage()
    {
        userInfo = await ApiService.Singleton().ObtenerUsuario(email, password);
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
=======
    private bool ValidateCredentials(string email, string password)
    {
        if (!string.IsNullOrEmpty(email.Trim()) || !string.IsNullOrEmpty(password.Trim()))
        {
            //Poner aqui la petición http para validar las credenciales

            return true;
        } 
        return false;
        

    }

    private void RedirectPage()
    {
        if (ValidateCredentials(usuario.Email, usuario.Password))
        {
            NavigationManager.NavigateTo("/fetchdata");
        } else
        {
            errorMessage = "Credenciales incorrectas! Por favor, intente de nuevo";
        }
>>>>>>> b75ce1a1b6af9812190ff65d525c924f9655986f
    }
}
