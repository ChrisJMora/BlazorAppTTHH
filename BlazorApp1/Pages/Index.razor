@page "/"
@inject NavigationManager NavigationManager

@using BlazorApp1.Services;
@using BlazorApp1.Models;


<h1 class="login-header">Ingresar Credenciales</h1>

@if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
}

<EditForm model="@formModel" OnValidSubmit="@RedirectPage">
    <DataAnnotationsValidator />

    <div  class="container">
        <div class="login-container">
            <div class="form-group">
                <label for="Codigo" class="form-label">Código:</label>
                <InputText id="Codigo" @bind-Value="formModel.Codigo" class="form-input" />
                <ValidationMessage For="@(() => formModel.Codigo)" /> 
            </div>

            <div class="form-group">
                <label for="Password" class="form-label">Contraseña:</label>
                <InputText type="password" id="Password" @bind-Value="formModel.Password" class="form-input" />
                <ValidationMessage For="@(() => formModel.Password)" /> 
            </div>

            <div>
                <select>
                    @if (emisores != null)
                    {
                        foreach(var emisor in emisores)
                        {
                            <option>@emisor.Codigo @emisor.NombreEmisor</option>
                        }
   
                    }
                </select>
            </div>

            <div class="form-group">
                <label class="forgot">Se ha olvidado la contraseña</label>
            </div>

            <button type="submit" class="custom-button"> Aceptar </button>
        </div>

    </div>
</EditForm>

@if (showPopup)
{
    <div class="popup">
        <div class="popup-content">
            <span class="close" @onclick="ClosePopup">&times;</span>
            <p>User Information: </p>
            <p>Name: @userInfo?.NombreUsuario</p>
            <p>Profile: @userInfo?.Perfil</p>
        </div>
    </div>
}


@code {
    private Usuario usuario = new Usuario();
    private UsuarioFormulario formModel = new UsuarioFormulario();
    private string? errorMessage;

    private List<Emisor>? emisores;
    private bool showPopup = false;
    private Usuario? userInfo;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            emisores = await ApiService.Singleton().ObtenerEmisores();
            errorMessage = "";
        } catch (Exception e)
        {
            errorMessage = "No se pudo obtener los emisores. \nSistema fuera de línea\nIntente más tarde.";
        }
    }


    private async Task RedirectPage()
    {
        try
        {
            userInfo = await ApiService.Singleton().ObtenerUsuario(formModel.Codigo, formModel.Password);
            errorMessage = "";
            if (userInfo == null) errorMessage = "No se encontró el usuario.";
            else errorMessage = "";
            showPopup = true;
        } catch
        {
            errorMessage = "No se encontró el usuario.";
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
    }



}
